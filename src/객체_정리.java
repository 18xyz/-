
public class 객체_정리 {

	public static void main(String[] args) {
		/*
		객체지향프로그래밍(Object-Oriented Programming:OPP)란
		데이터와 절차를 하나의 덩어리(객체)로 묶어서 생각하는 방법
		
		객체
		현실 세계에서 '사물'
		객체 안의 변수들을 필드(field)라고, 객체 안의 함수를 메소드(method)라고 부름
		객체는 필드와 메소드로 이루어진 소프트웨어의 묶음
		객체는 속성과 동작으로 구성
		자바에서는 속성을 필드(field), 동작을 메소드(method)라고 부름
		
		객체는 다른 객체와 필드와 메소드를 통해 상호작용이 가능
		상호작용 = 객체간의 메소드 호츨을 의미
				매개변수 값과 리턴값을 통해 데이터를 주고 받음
		
		메시지(message)란
		객체간은 메시지를 통해 상호작용이 가능, 대체로 매개변수의 형태로 전달
		Cat.setTail(1);
		Cat: 메시지를 받을 객체
		setTeail:메시지의 이름
		(1): 메시지의 매개변수
		
		실제 현실 세계의 객체를 소프웨어 객체로 설계하는 것을 객체 모델링(Object Modeling)이라고 함
		1. 실제 사물의 속성과 기능을 분석
		2. 데이터(필드)와 함수(메소드)로 정의

		객체는 개별적으로 사용할 수 있지만, 대부분 다른 객체와 관계를 맺고 있음
		자동차 <- 사람 = 사용 관계: 객체 간의 상호작용
		자동차 <- 엔진(or 타이어, 핸들 등) = 집합관계: 여러 부품과 하나의 완성품
		기계 <- 자동차 = 상속관계: 상위(부모) 하위(자식) 객체 생성 관계
		
		객체의 특징
		1. 캡슐화
		캡슐화는 은닉성이란 게 있어 클래스에 담는 내용 중 중요한 데이터나 기능을 외부에서 접근하지 못하게 할 수 있음
		클래스라는 캡슐 알약의 기능과 내용물에 (대한 정보에) 함부로 접근할 수 없게 할 수 있음
		캡슐화된 멤버를 노출성에 대한 여부는 접근 제한자로 결정
		2. 상속
		현실 세계에서 부모가 자식에게 물려주는 행위, 부모가 자식을 선택해서 물려주는 행위
		객체지향프로그래밍에서의 상속은 자식이 부모를 선택해 부모의 필드와 메소드를 물려받는 것
		특징
		부모 클래스 재사용으로 자식 클래스 빠르게 개발 가능
		반복된 코드 중복 줄이기
		유지 보수의 편리성 제공(부모 클래스 한번의 수정으로 자식 클래스 수정 필요x)
		객체의 다형성 구현 가능
		3.다형성
		같은 타입이지만 실행 결과가 다양한 객체를 대입(이용)할 수 있는 성질
		부모타입에는 모든 자식 객체가 대입될 수 있으며 자식 타입은 보무 타입으로 자동 타입 변환 됨
		parent a = new child1();
		parent b = new child2();
		예시)
		객체를 부품화 시킬 수 있음
		자동차란 객체가 있을 때
		자동차 설계 시 타이어 부분에 사용된 부분을 타이어 타입이라고 가정
		자동차의 타어어 타입으로 A브랜드, B브랜드가 있음
		어떤 타이어 타입을 사용하느냐에 따라 각 타이어의 성능은 다르게 나올 수 있다
		A브랜드와 B브랜드는 자식 객체로 객체를 부품화 시킬 수 있음
*/
		
/*		
		클래스(class)
		특정한 기능을 가진 객체를 생성하게 해주는 설계도, 틀
		클래스는 객체에 포함될 필드(변수)와 메소드를 정의
		객체는 new 연산자를 사용해 생성
		클래스로부터 객체를 생성하는 과정을 실체화(instantitation),
		해당 클래스에 생성된 객체를 클래스의 인스턴스(intance)라고 부름
*/		
		
	}

}
